#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage[hidelinks,
  bookmarksnumbered=true,
  unicode=true,
  pdftitle={Travis C++ tutorial},
  pdfauthor={Richèl Bilderbeek}
  ]{hyperref}
\usepackage{tikz}
\usepackage{tkz-graph}
\usepackage{pgf}
\usetikzlibrary{arrows,automata}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Travis C++ tutorial
\end_layout

\begin_layout Author
Richèl Bilderbeek
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/CppLogo.jpg
	lyxscale 50
	width 50text%

\end_inset


\begin_inset Graphics
	filename images/TravisCIBig.png
	lyxscale 50
	width 28text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is a Travis C++ tutorial, version 0.2.
\end_layout

\begin_layout Subsection
License
\end_layout

\begin_layout Standard
This tutorial is licensed under Creative Commons license 4.0.
 All C++ code is licensed under GPL 3.0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/CC-BY-SA_icon.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creative Commons license 4.0
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Continuous integration
\end_layout

\begin_layout Standard
Collaboration can be scary: the other(s)
\begin_inset Foot
status open

\begin_layout Plain Layout
if not you
\end_layout

\end_inset

 may break the project worked on.
 The project can be of any type, not only programming, but also collaborative
 writing.
\end_layout

\begin_layout Standard
A good first step ensuring a pleasant experience is to use a version control
 system.
 A version control system keeps track of the changes in the project and
 allows for looking back in the project history when something has been
 broken.
 
\end_layout

\begin_layout Standard
The next step is to use an online version control repository, which makes
 the code easily accessible for all contributors.
 The online version control repository may also offer additional collaborative
 tools, like a place where to submit bug reports, define project milestones
 and allowing external people to submit requests, bug reports or patches.
\end_layout

\begin_layout Standard
Up until here, it is possible to submit a change that breaks the build.
 
\end_layout

\begin_layout Standard
A continuous integration tools checks what is submitted to the project and
 possibly rejects it when it does not satisfy the tests and/or requirements
 of the project.
 Instead of manually proofreading and/or testing the submission and mailing
 the contributor his/her addition is rejected is cumbersome at least.
 A continuous integration tool will do this for you.
\end_layout

\begin_layout Standard
Now, if someone changes you project, you can rest assured that his/her submissio
n does not break the project.
 Enjoy!
\end_layout

\begin_layout Subsection
Tutorial style
\end_layout

\begin_layout Standard
This tutorial is aimed at the beginner.
\end_layout

\begin_layout Paragraph
Introduction of new terms and tools
\end_layout

\begin_layout Standard
All terms and tools are introduced shortly once, by a 'What is' paragraph.
 This allows a beginner to have a general idea about what the term/tool
 is, without going in-depth.
 Also, this allows for those more knowledgeable to skim the paragraph.
\end_layout

\begin_layout Paragraph
Repetitiveness
\end_layout

\begin_layout Standard
To allow skimming, most chapters follow the same structure.
 Sometimes the exact same wording is used.
 This is counteracted by referring to earlier chapters.
\end_layout

\begin_layout Paragraph
From Travis to source
\end_layout

\begin_layout Standard
Every build, I start from Travis CI its point of view: 'What do I have to
 do?'.
 Usually Travis CI has to call at least one build bash script.
 After describing the Travis file, I will show those build files.
 Those build files usually invoke Qt Creator project files, which in turn
 combine source files to executables.
 It may feel that the best is saved for last, but I'd disagree: this is
 a Travis tutorial.
 I also think it makes up for a better narrative, to go from big to small.
\end_layout

\begin_layout Subsection
This tutorial
\end_layout

\begin_layout Standard
This tutorial is available online at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/richelbilderbeek/travis_cpp_tutorial
\end_layout

\end_inset

.
 Of course, it is checked by Travis that:
\end_layout

\begin_layout Itemize
all the setups described work
\end_layout

\begin_layout Itemize
this document can be converted to PDF.
 For this, it needs the files from all of these setups
\end_layout

\begin_layout Subsection
Acknowledgements
\end_layout

\begin_layout Standard
These people contributed to this tutorial:
\end_layout

\begin_layout Itemize
Kevin Ushey, for getting Rcpp11 and C++11 to work
\end_layout

\begin_layout Subsection
Collaboration
\end_layout

\begin_layout Standard
I welcome collaboration for this tutorial, especially in getting the scripts
 as clean as possible.
 If you want to help scraping off some lines, I will be happy to make you
 a collaborator of some GitHubs.
 
\end_layout

\begin_layout Subsection
Feedback
\end_layout

\begin_layout Standard
This tutorial is not intended to be perfect yet.
 For that, I need help and feedback from the community.
 All referenced feedback is welcome, as well as any constructive feedback.
 
\end_layout

\begin_layout Section
Setting up the basic build
\end_layout

\begin_layout Standard
The basic build is more than just a collection of files.
 It needs to be set up.
 This chapter shows how to do so.
\end_layout

\begin_layout Itemize
Create a GitHub online
\end_layout

\begin_layout Itemize
Bring the git repository to your local computer
\end_layout

\begin_layout Itemize
Create a Qt Creator project
\end_layout

\begin_layout Itemize
Create the build bash scripts
\end_layout

\begin_layout Subsection
Create a GitHub online
\end_layout

\begin_layout Paragraph
What is GitHub?
\begin_inset Index idx
status open

\begin_layout Plain Layout
GitHub
\end_layout

\end_inset


\end_layout

\begin_layout Standard
GitHub is a site that creates websites around projects.
 It is said to host these projects.
 Each project contains at least one, but usually multiple files.
 These files can be put on your own hard disc, USB stick, or other storage
 devices.
 They could also be put at a central place, which is called a repository,
 so potentially others can also access these.
 GitHub is such a file repository.
 GitHub also keeps track of the history of the project, which is also called
 version control.
 GitHub uses git as a version control software.
 In short: GitHub hosts git repositories.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-homepage"

\end_inset

 shows the GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubHomepage.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-homepage"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Register
\begin_inset Index idx
status open

\begin_layout Plain Layout
GitHub, registration
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before you can create a new repository, you must register.
 Registration is free for open source projects, with an unlimited
\begin_inset Foot
status open

\begin_layout Plain Layout
the maximum I have observed is a person that has 350 repositories
\end_layout

\end_inset

 amount of public repositories.
\end_layout

\begin_layout Standard
From the GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset

 (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-homepage"

\end_inset

), click the top right button labeled 'Sign up'.
 This will take you to the 'Join GitHub' page (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-join"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubJoin.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The join GitHub page
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-join"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Filling this in should be as easy.
 After filling this in, you are taken to your GitHub profile page (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-profile"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubProfile.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A GitHub profile page
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-profile"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Creating a repository
\begin_inset Index idx
status open

\begin_layout Plain Layout
GitHub, creating a repository
\end_layout

\end_inset


\end_layout

\begin_layout Standard
From your GitHub profile page (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-profile"

\end_inset

), click on the plus ('Create new ...') at the top right, then click 'New repositor
y' (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-create-repository"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubCreateRepository.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Create a GitHub repository
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-create-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Do check 'Initialize this repository with a README', add a .gitignore with
 'C++' and add a licence like 'GPL 3.0'.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GitHubCreatedRepository.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Created a GitHub repository
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-created-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You have now created your own online version controlled repository (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-created-repository"

\end_inset

)!
\end_layout

\begin_layout Subsection
Bring the git repository to your local computer
\end_layout

\begin_layout Paragraph
What is git?
\begin_inset Index idx
status open

\begin_layout Plain Layout
git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
git is a version control system.
 It allows you keep a history of a file its content in time.
 It is the more convenient alternative of making copies before each modification.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm, semithick
]   
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (A)              {main.cpp};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (B) [below of=A] {main.cpp};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (C) [below of=B] {main.cpp};   
\end_layout

\begin_layout Plain Layout


\backslash
path (A) edge [bend right] node {revision 1} (B)
\end_layout

\begin_layout Plain Layout

      (B) edge [bend right] node {revision 2} (C)
\end_layout

\begin_layout Plain Layout

  ; 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Multiple versions of main.cpp.
 git allows to always go back to each version of main
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Git-Logo-2Color.png
	lyxscale 10
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
git logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Using git
\end_layout

\begin_layout Standard
Go to the terminal and type the following line to download your repository:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git clone https://github.com/[your_name]/[your_repository]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Replace '[your_name]' and '[your_repository]' by your GitHub username and
 the repository name.
 A new folder called '[your_repository]' is created where you should work
 in.
 For example, to download this tutorial its repository to a folder called
 'travis_cpp_tutorial':
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git clone https://github.com/richelbilderbeek/travis_cpp_tutorial
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create a Qt Creator project
\end_layout

\begin_layout Paragraph
What is Qt Creator?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt Creator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Qt Creator is a C++ IDE
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Qt_Creator_logo.png
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Qt creator logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Creating a new project
\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt Creator, create new project
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Project will have some defaults: GCC.
\end_layout

\begin_layout Paragraph
What is a Qt Creator project file?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-a-Qt-Creator-project-file?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt Creator project file
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A Qt Creator project file contains the information how a Qt Creator project
 must be built.
 It commonly has the .pro
\begin_inset Index idx
status open

\begin_layout Plain Layout
.pro
\end_layout

\end_inset

 file extension.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
Two big circles: 'C++ Project' and 'executable'
\end_layout

\begin_layout Plain Layout
Within first circle: two smaller circles: .cpp and .h
\end_layout

\begin_layout Plain Layout
Arrow from first to second circle with text 'compiler, linker'
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Overview of converting a C++ project to an executable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
.cpp -- compiler --> .o
\end_layout

\begin_layout Plain Layout
.h --(dotted line)--> same .o
\end_layout

\begin_layout Plain Layout
.o -- linker --> executable
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
From files to executable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is qmake?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-qmake?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
qmake
\end_layout

\end_inset


\end_layout

\begin_layout Standard
qmake is a tool to create makefiles.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
Two upper circles: '.pro' -> 'Makefile'
\end_layout

\begin_layout Plain Layout
Two lower circles: '.cpp' and '.h', both -> to .pro, both dotted line to 'Makefile'
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
What qmake does
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is make?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-make?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
make
\end_layout

\end_inset


\end_layout

\begin_layout Standard
make is a tool that reads a makefile and creates an executable
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
'Makefile' --[make]> 'executable'
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
What make does
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is GCC?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-GCC?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
GCC
\end_layout

\end_inset


\end_layout

\begin_layout Standard
GCC, the GNU Compiler Collection, is a collection of compilers, among other,
 the C++ compiler called g++.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/GNU_Compiler_Collection_logo.png
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
GCC logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is g++?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-g++?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
g++
\end_layout

\end_inset


\end_layout

\begin_layout Standard
g++ is the C++ compiler that is part of the GCC.
\end_layout

\begin_layout Paragraph
What is C++98?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-C++98?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
C++98
\end_layout

\end_inset


\end_layout

\begin_layout Standard
C++98 is the first C++ standard in 1998.
\end_layout

\begin_layout Paragraph
What is the STL?
\begin_inset Index idx
status open

\begin_layout Plain Layout
STL
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The STL, the Standard Template Library, is the C++ standard library.
\end_layout

\begin_layout Subsection
Create the build bash scripts
\end_layout

\begin_layout Paragraph
What is bash?
\begin_inset CommandInset label
LatexCommand label
name "par:What-is-bash?"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
bash
\end_layout

\end_inset


\end_layout

\begin_layout Standard
'bash' is a shell scripting language
\end_layout

\begin_layout Section
The basic build
\begin_inset CommandInset label
LatexCommand label
name "sec:travis_qmake_gcc_cpp98"

\end_inset


\end_layout

\begin_layout Standard
This basic build consists of a 'Hello World' program, written in C++98.
 It uses the Qt Creator default settings: Qt Creator will create a Qt Creator
 project file, which in turn will use GCC.
\end_layout

\begin_layout Itemize
What is a C++98 'Hello world' program? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:A-C++98-Hello-World-Program"

\end_inset


\end_layout

\begin_layout Itemize
The Travis build file.
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98-travis.yml"

\end_inset


\end_layout

\begin_layout Itemize
The build script.
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98-build.sh"

\end_inset


\end_layout

\begin_layout Itemize
The Qt Creator project file.
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98.pro"

\end_inset


\end_layout

\begin_layout Itemize
The source file.
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98-main.cpp"

\end_inset


\end_layout

\begin_layout Subsection
What is a C++98 'Hello world' program?
\begin_inset CommandInset label
LatexCommand label
name "sub:A-C++98-Hello-World-Program"

\end_inset


\end_layout

\begin_layout Standard
A 'Hello World' program shows the text 'Hello world' on the screen.
 It is a minimal program.
 Its purpose is to show that all machinery is in place to create an executable
 from C++ source code.
 
\end_layout

\begin_layout Standard
A listing of a 'Hello world' program is shown at algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:travis_qmake_gcc_cpp98-main.cpp"

\end_inset

.
 Here I go through each line:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <iostream>
\end_layout

\end_inset

Read a header file called 'iostream'
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main() { /* your code */ }
\end_layout

\end_inset

The 'main' function is the starting point of a C++ program.
 Its body is between curly braces
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::cout << "Hello world
\backslash
n";
\end_layout

\end_inset

Show the text 'Hello world' on screen and go to the next line
\end_layout

\begin_layout Subsection
The Travis file
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98-travis.yml"

\end_inset


\end_layout

\begin_layout Standard
Travis CI is set up by a file called '.travis.yml'.
 The filename starts with a dot, which means it is a hidden file on UNIX
 systems.
 The extension 'yml'
\begin_inset Index idx
status open

\begin_layout Plain Layout
yml
\end_layout

\end_inset

 is an abbreviation of 'Yet another Markup Language'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Yet Another Markup Language
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The '.travis.yml' file to build and run a 'Hello world' program looks like
 this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has the following elements:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

language: cpp
\end_layout

\end_inset

The main programming language of this project is C++
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

compiler: gcc
\end_layout

\end_inset

The C++ code will be compiled by the GCC (What is GCC? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-GCC?"

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

script: 
\end_layout

\begin_layout Plain Layout

  - ./build.sh
\end_layout

\begin_layout Plain Layout

  - ./travis_qmake_gcc_cpp98
\end_layout

\end_inset

The script that Travis will run.
 In this case, it will execute the 'build.sh' bash script, that should build
 the excutable.
 Then, the (hopefully) created executable called 'travis_qmake_gcc_cpp98'
 is run
\end_layout

\begin_layout Standard
This build script can fail in in two places:
\end_layout

\begin_layout Enumerate
The bash script can fail, which is discussed in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98-build.sh"

\end_inset


\end_layout

\begin_layout Enumerate
The executable can return an error code.
 A 'Hello World' program is intended to return the error code for 'everything
 went fine'.
 Other programs in this tutorial return error codes depending on test cases.
 It may also be that dynamically linked libraries cannot be found, which
 crashes the program at startup
\end_layout

\begin_layout Subsection
The build bash script
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98-build.sh"

\end_inset


\end_layout

\begin_layout Standard
The bash build script used to build the executable of a 'Hello world' program
 looks like this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This build script calls: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/bin/bash
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
#!/bin/bash
\end_layout

\end_inset

This line indicates the script is a bash script.
 The '#!', (also called the 'shebang'
\begin_inset Index idx
status open

\begin_layout Plain Layout
shebang
\end_layout

\end_inset

) is a directive to use the executable at the absolute path following it.
 In this script, 'bash' is used, which resides in the '/bin' folder
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

qmake
\end_layout

\end_inset

'qmake'
\begin_inset Index idx
status open

\begin_layout Plain Layout
qmake
\end_layout

\end_inset

 is called to create a makefile
\begin_inset Index idx
status open

\begin_layout Plain Layout
Makefile
\end_layout

\end_inset

 (What is 'qmake'? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-qmake?"

\end_inset

) from the only Qt Creator project file.
 In this build, the name of this project file is ommitted, as there is only
 one, but there are chapters in this tutorial where the project name is
 mentioned explicitly
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

make
\end_layout

\end_inset

'make'
\begin_inset Index idx
status open

\begin_layout Plain Layout
make
\end_layout

\end_inset

 is called to compile the makefile (What is 'make'? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-make?"

\end_inset

).
 In this build, 'make' is called without any arguments, but there are chapters
 in this tutorial where 'make' is called with arguments
\end_layout

\begin_layout Standard
This bash script can fail in two places: 
\end_layout

\begin_layout Enumerate
If the Qt Creator project file is incorrectly formed, 'qmake' will fail,
 and as it cannot create a valid makefile
\end_layout

\begin_layout Enumerate
If the Qt Creator project file is incomplete (for example: by omitting libraries
), 'make' will fail.
 'qmake' has created a makefile, after which 'make' finds out that it cannot
 create an executable with that makefile
\end_layout

\begin_layout Subsection
Qt Creator project file
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98.pro"

\end_inset


\end_layout

\begin_layout Standard
The following Qt Creator project file is used in this 'Hello world' build:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98/travis_qmake_gcc_cpp98.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This Qt Creator project file has the following elements:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SOURCES += main.cpp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
SOURCES
\end_layout

\end_inset

The file 'main.cpp' is a source file, that has to be compiled
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -Wall -Wextra -Weffc++ -Werror
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
QMAKE_CXXFLAGS
\end_layout

\end_inset

The project is checked with all warnings ('-Wall'
\begin_inset Index idx
status open

\begin_layout Plain Layout
-Wall
\end_layout

\end_inset

), with extra warnings ('-Wextra'
\begin_inset Index idx
status open

\begin_layout Plain Layout
-Wextra
\end_layout

\end_inset

) and with the Effective C++ 
\begin_inset CommandInset citation
LatexCommand cite
key "meyers2005effective"

\end_inset

 advices ('-Weffc++'
\begin_inset Index idx
status open

\begin_layout Plain Layout
-Weffc++
\end_layout

\end_inset

) enforced.
 A warning is treated as an error ('-Werror'
\begin_inset Index idx
status open

\begin_layout Plain Layout
-Werror
\end_layout

\end_inset

).
 This forces you (and your collaborators) to write tidy code.
\end_layout

\begin_layout Subsection
C++ source file
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98-main.cpp"

\end_inset


\end_layout

\begin_layout Standard
The single C++ source file used in this 'Hello world' build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98-main.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the code does is display the text 'Hello world'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Hello world
\end_layout

\end_inset

, which is a traditional start for many programming languages.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:A-C++98-Hello-World-Program"

\end_inset

 for a line-by-line explanation.
 The code is written in C++98 (What is C++98? See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:What-is-C++98?"

\end_inset

).
 It does not use features from the newer C++ standards, but can be compiled
 under these newer standards.
 It will not compile under plain C.
\end_layout

\begin_layout Section
Extending the build by one step
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending-the-build-by-one-step"

\end_inset


\end_layout

\begin_layout Standard
The following chapter describe how to extend the build in one direction.
 These are:
\end_layout

\begin_layout Itemize
Use a debug and release build: see chapter 
\end_layout

\begin_layout Itemize
Use of C++11: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++14: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\begin_layout Itemize
Use of Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_boost"

\end_inset


\end_layout

\begin_layout Itemize
Use of Boost.Test: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_boost_test"

\end_inset


\end_layout

\begin_layout Itemize
Use of clang: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_clang_cpp98"

\end_inset


\end_layout

\begin_layout Itemize
Use of gcov and Codecov: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_gcov"

\end_inset


\end_layout

\begin_layout Itemize
Use of gprof: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_gprof"

\end_inset


\end_layout

\begin_layout Itemize
Use of Qt: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_qt"

\end_inset


\end_layout

\begin_layout Itemize
Use of QTest: see chapter
\end_layout

\begin_layout Itemize
Use of Rcpp: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_rcpp"

\end_inset


\end_layout

\begin_layout Itemize
Use of SFML: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_sfml"

\end_inset


\end_layout

\begin_layout Itemize
Use of Urho3D: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_urho3d"

\end_inset


\end_layout

\begin_layout Itemize
Use of Wt: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_wt"

\end_inset


\end_layout

\begin_layout Subsection
Use of C++11
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by using C++11.
 
\end_layout

\begin_layout Paragraph
What is C++11?
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++11
\end_layout

\end_inset


\end_layout

\begin_layout Standard
C++11 is a C++ standard
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL only
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a C++11 version of a 'Hello world' program.
 The keyword 'noexcept' does not exist in C++98 and it will fail to compile.
 This code will compile under newer versions of C++.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11/travis_qmake_gcc_cpp11.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

, except for:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXX = g++-5
\end_layout

\end_inset

Set the C++ compiler to use g++ version 5, which is a newer version than
 currently used by default
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_LINK = g++-5
\end_layout

\end_inset

Set the C++ linker to use g++ version 5, which is a newer version than currently
 used by default
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CC = g++5
\end_layout

\end_inset

Set the C compiler to use g++ version 5, which is a newer version than currently
 used by default
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -std=c++11
\end_layout

\end_inset

Compile under C++11
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install:
\end_layout

\end_inset

The following events will take place before installation
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
\end_layout

\end_inset

A new apt repository is added.
 The '-y' explicitly states that we are sure we want to do this.
 Without the '-y' flag, Travis will be prompted if it is sure it wants to
 add this repository.
 This would break the build.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  - sudo apt-get update -qq
\end_layout

\end_inset

After adding the new apt repository, then the current repositories need
 to be updated updated.
 The '-qq' means that this happens quietly; with the least amount of output.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

install: sudo apt-get install -qq g++-5
\end_layout

\end_inset

Install g++-5, which is a newer version of GCC than is installed by default
\end_layout

\begin_layout Subsection
Use of C++14
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by using C++14.
 
\end_layout

\begin_layout Paragraph
What is C++14?
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++14
\end_layout

\end_inset


\end_layout

\begin_layout Standard
C++14 is a C++ standard.
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++14 
\end_layout

\begin_layout Itemize
Libraries: STL only
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a simple C++14 program that will not compile under C++11.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14/travis_qmake_gcc_cpp14.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp14.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the C++11 build in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11"

\end_inset

, except for that it uses one different QMAKE_CXXFLAGS item:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -std=c++14
\end_layout

\end_inset

Compile under C++14
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the C++11 build in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file is the same as the C++11 build in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\begin_layout Subsection
Adding Boost
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Paragraph
What is Boost?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Boost
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Boost is a collection of C++ libraries
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Boost_logo.png
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Boost logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL and Boost
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will only compile when the Boost libraries are present.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_boost/travis_qmake_gcc_cpp98_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_boost/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

addons:
\end_layout

\begin_layout Plain Layout

  apt:
\end_layout

\begin_layout Plain Layout

    packages: libboost-all-dev
\end_layout

\end_inset

This makes Travis aware that you want to use the aptitude package 'libboost-all-
dev'.
 Note that this code cannot be put on one line: it has to be indented similar
 to this
\end_layout

\begin_layout Subsection
Adding Boost.Test
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_boost_test"

\end_inset


\end_layout

\begin_layout Standard
Adding only a testing framework does not work: it will not compile in C++98.
 Instead, this is covered in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11_boost_test"

\end_inset

.
\end_layout

\begin_layout Subsection
Use of clang
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_clang_cpp98"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is compiled by the clang compiler.
 
\end_layout

\begin_layout Paragraph
What is clang?
\begin_inset Index idx
status open

\begin_layout Plain Layout
clang
\end_layout

\end_inset


\end_layout

\begin_layout Standard
clang is a C++ compiler
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/LLVM_Logo.svg
	lyxscale 25
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
clang logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: clang 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_clang_cpp98/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_clang_cpp98/travis_qmake_clang_cpp98.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_clang_cpp98.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_clang_cpp98.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_clang_cpp98/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_clang_cpp98/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adding code coverage
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_gcov"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by calling gcov and using codecov to show the code coverage.
 
\end_layout

\begin_layout Paragraph
What is gcov?
\begin_inset Index idx
status open

\begin_layout Plain Layout
gcov
\end_layout

\end_inset


\end_layout

\begin_layout Standard
gcov is a tool that works with GCC to analyse code coverage
\end_layout

\begin_layout Paragraph
What is Codecov?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Codecov
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Codecov works nice with GitHub and give nicer reports
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Codecov.png
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Codecov logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Build overview
\end_layout

\begin_layout Standard
This will be a more complex build, consisting of two projects:
\end_layout

\begin_layout Itemize
The regular project that just runs the code
\end_layout

\begin_layout Itemize
The project that measures code coverage
\end_layout

\begin_layout Standard
The filenames are shown in this figure:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp98$ 
\backslash

\backslash
 $
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (-2, 0) { $main.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (2, 0) { $do
\backslash
_magic.h$ 
\backslash

\backslash
 $do
\backslash
_magic.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp98$ 
\backslash

\backslash
 $
\backslash
_gcov
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_gcov.cpp$ };
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL only 
\end_layout

\begin_layout Itemize
Code coverage: yes 
\end_layout

\begin_layout Itemize
Source: multiple files
\end_layout

\begin_layout Paragraph
Common files
\end_layout

\begin_layout Standard
Both builds use the following code:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_gcov/do_magic.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
do_magic.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
And its implementation:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_gcov/do_magic.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
do_magic.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Normal build main function
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_gcov/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Normal build Qt Crator project file
\end_layout

\begin_layout Standard
This normal is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_gcov/travis_qmake_gcc_cpp98_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Code coverage main function
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_gcov/main_gcov.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Code coverage build Qt Crator project file
\end_layout

\begin_layout Standard
This normal is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_gcov/travis_qmake_gcc_cpp98_gcov_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_gcov_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has two new lines:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -fprofile-arcs -ftest-coverage
\end_layout

\end_inset

Let the C++ compiler add coverage information
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LIBS += -lgcov
\end_layout

\end_inset

Link against the gcov library
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_gcov/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The new step is after having run the executable, 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

gcov main_gcov.cpp
\end_layout

\end_inset

Let gcov create a coverage report
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cat main_gcov.cpp.gcov
\end_layout

\end_inset

Show the file 'main.cpp.gcov', which contains the coverage of 'main.cpp'
\end_layout

\begin_layout Paragraph
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: true
\end_layout

\end_inset

Travis will give super user rights to the script.
 This will slow the build time, but it is inevitable for the next step
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install: sudo pip install codecov
\end_layout

\end_inset

Travis will use pip to install codecov using super user rights
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_success: codecov
\end_layout

\end_inset

After the script has run successfully, codecov is called
\end_layout

\begin_layout Subsection
Adding profiling
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_gprof"

\end_inset


\end_layout

\begin_layout Subsection
Adding the Qt library
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_qt"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Qt library.
\end_layout

\begin_layout Paragraph
What is Qt?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Qt (pronounce cute') is a library to create C++ GUI's.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Qt_logo_2015.svg
	lyxscale 10
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Qt logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL and Qt
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt/travis_qmake_gcc_cpp98_qt.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_qt.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
Adding Rcpp
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_rcpp"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Rcpp library/package.
 
\end_layout

\begin_layout Paragraph
What is R?
\begin_inset Index idx
status open

\begin_layout Plain Layout
R
\end_layout

\end_inset


\end_layout

\begin_layout Standard
R is a programming language.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Rlogo.png
	lyxscale 10
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
R logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
What is Rcpp?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rcpp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rcpp is a package that allows to call C++ code from R 
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL and Rcpp
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files
\end_layout

\begin_layout Standard
The build will be complex: I will show the C++ build and the R build seperately
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1, 2) { $C++$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 $domagic.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $do
\backslash
_magic
\backslash
_cpp.h$ 
\backslash

\backslash
 $do
\backslash
_magic
\backslash
_cpp.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5, 2) { $R$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $do
\backslash
_magic
\backslash
_r.R$ 
\backslash

\backslash
 $test-do
\backslash
_magic.R$ };
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
C++ and R: the C++ function
\end_layout

\begin_layout Standard
Both C++ and R use this function.
 It is called 'do_magic_cpp'.
 It is declared in the header file 'do_magic_cpp.h', as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_rcpp/src/do_magic_cpp.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
src/do_magic_cpp.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The header file consists solely of #include guards and the declaration of
 the function 'do_magic_cpp'.
\end_layout

\begin_layout Standard
The function 'do_magic_cpp' is implemented in the implementation file 'do_magic_
cpp.cpp', as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_rcpp/src/do_magic_cpp.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
src/do_magic_cpp.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This implementation file has gotten rather elaborate, thanks to Rcpp and
 documentation.
 This is because it has to be callable from both C++ and R and satisfy the
 requirement from both languages.
\end_layout

\begin_layout Subsubsection
C++: main source file
\end_layout

\begin_layout Standard
The C++ program has a normal main function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_rcpp/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All it does is a simple test of the 'do_magic_cpp' function.
\end_layout

\begin_layout Subsubsection
C++: Qt Creator project file
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_rcpp/domagic.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
domagic.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:domagic.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The name of the Qt Creator project file is 'domagic' as it follows the same
 naming as the R project.
 It add the R and Rcpp and src folders to its include path and links to
 R.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Replace '/home/p230198' by '~' or HOME or something
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The C++ build script
\end_layout

\begin_layout Standard
The C++ build script is the regular canon of qmake, make and executable
 call.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_rcpp/build_cpp.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build_cpp.sh
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_rcpp_build_cpp.sh"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This scipt ...
\end_layout

\begin_layout Subsubsection
R: the R function
\end_layout

\begin_layout Standard
The R function 'do_magic_r' calls the C++ function 'do_magic_cpp':
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_rcpp/R/do_magic_r.R"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
R/do_magic_r.R
\begin_inset CommandInset label
LatexCommand label
name "alg:do_magic_r.R"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next to this, it is just Roxygen2 documentation
\end_layout

\begin_layout Subsubsection
R: The R tests
\end_layout

\begin_layout Standard
R allows for easy testing using the 'testthat' package.
 A test file looks as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_rcpp/tests/testthat/test-do_magic.R"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
tests/testthat/test-do_magic_r.R
\begin_inset CommandInset label
LatexCommand label
name "alg:test-do_magic_r.R"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The tests call both the R and C++ functions with certain inputs and checks
 if the output matches the expectations.
 
\end_layout

\begin_layout Subsubsection
The R script to install packages
\end_layout

\begin_layout Standard
The C++ build script is the regular canon of qmake, make and executable
 call.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_rcpp/install_r_packages.R"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build_cpp.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_rcpp/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file is longer than usual, as it both compiles and runs the
 C++ and R code.
\end_layout

\begin_layout Subsubsection
fatal error: Rcpp.h: No such file or directory
\end_layout

\begin_layout Standard
Add these line to the .travis.yml file to find Rcpp.h:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_failure:
\end_layout

\begin_layout Plain Layout

 # fatal error: Rcpp.h: No such file or directory
\end_layout

\begin_layout Plain Layout

 - find / -name 'Rcpp.h'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can then add the folder found to the INCLUDEPATHS of the Qt Create project
 file.
\end_layout

\begin_layout Subsection
Adding the SFML library
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_sfml"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the SFML library.
\end_layout

\begin_layout Paragraph
What is SFML?
\begin_inset Index idx
status open

\begin_layout Plain Layout
SFML
\end_layout

\end_inset


\end_layout

\begin_layout Standard
SFML ('Simple and Fast Multimedia Library') is a library vey suitable for
 2D game development
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/SFML Logo.svg
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
SFML logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL and SFML
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_sfml/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the SFML libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_sfml/travis_qmake_gcc_cpp98_sfml.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_sfml.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_sfml.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_sfml/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_sfml/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

install: sudo apt-get install libsfml-dev
\end_layout

\end_inset

This makes Travis install the needed package.
\end_layout

\begin_layout Subsection
Adding the Urho3D library
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_urho3d"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Urho3D library.
\end_layout

\begin_layout Paragraph
What is Urho3D?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Urho3D
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Urho3D is a library to create C++ 3D games.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Urho3D_logo.png
	lyxscale 50
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Urho3D logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL and Urho3D
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files
\end_layout

\begin_layout Standard
The C++ source files are too big to show here.
 Their names are:
\end_layout

\begin_layout Itemize
cameramaster.h 
\end_layout

\begin_layout Itemize
cameramaster.cpp
\end_layout

\begin_layout Itemize
inputmaster.h
\end_layout

\begin_layout Itemize
inputmaster.cpp
\end_layout

\begin_layout Itemize
mastercontrol.h
\end_layout

\begin_layout Itemize
mastercontrol.cpp
\end_layout

\begin_layout Standard
The files will work together to create the following 3D world:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/travis_qmake_gcc_cpp98_urho3d.png
	lyxscale 50
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Screenshot of travis_qmake_gcc_cpp98_urho3d
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The files are compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_urho3d/travis_qmake_gcc_cpp98_urho3d.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_urho3d.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_urho3d.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_urho3d/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_urho3d/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
Adding the Wt library
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_wt"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Wt library.
\end_layout

\begin_layout Paragraph
What is Wt?
\begin_inset Index idx
status open

\begin_layout Plain Layout
Wt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wt (pronounce 'witty') is a library to create C++ websites.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/WtLogo.png
	lyxscale 50
	width 25text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Wt logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL and Wt
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_wt/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the SFML libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_wt/travis_qmake_gcc_cpp98_wt.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_wt.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_wt.pro-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_wt/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_wt/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Section
Extending the build by two steps
\end_layout

\begin_layout Standard
The following chapter describe how to extend the build in two directions.
 These are:
\end_layout

\begin_layout Itemize
Use of C++11 and Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11_boost"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++11 and Boost.Test: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11_boost_test"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++14 and Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp14_boost"

\end_inset


\end_layout

\begin_layout Subsection
Qt and QTest
\begin_inset CommandInset label
LatexCommand label
name "sub:Qt-and-QTest"

\end_inset


\end_layout

\begin_layout Standard
This build is about a Qt dialog.
 and test if it closes.
\end_layout

\begin_layout Subsubsection
What is QTest?
\end_layout

\begin_layout Standard
QTest is the Qt testing framework
\end_layout

\begin_layout Subsubsection
The Travis file
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt_qtest/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Creates a testing executable, runs it, then creates a normal executable.
 The normal executable is not run, as it requires user input.
 This means that on Travis CI, it would run forever, wouldn't Travis CI
 detect this and indicate a failure.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
https://docs.travis-ci.com/user/gui-and-headless-browsers
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The build bash scrips
\end_layout

\begin_layout Standard
Building the test:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/build_test.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build_test.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Building the normal executable:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/build_normal.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build_normal.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Qt Creator project files
\end_layout

\begin_layout Standard
The test:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt_qtest/travis_qmake_gcc_cpp98_qt_qtest_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_qt_qtest_test.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest_test"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The normal:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp98_qt_qtest/travis_qmake_gcc_cpp98_qt_qtest.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_qt_qtest.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The source files
\end_layout

\begin_layout Standard
These are the shared sources:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/my_dialog.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_dialog.h
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-my_dialog.h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/my_dialog.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_dialog.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-my_dialog.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main function of the normal executable:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/qtmain.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
qtmain.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-qtmain.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main function that starts the QTests:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/qtmain_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
qtmain_test.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-qtmain_test.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The header file for the QTests:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/my_dialog_test.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_dialog_test.h
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-my_dialog_test.h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The implementation file for the QTests:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp98_qt_qtest/my_dialog_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_dialog_test.cpp
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_qt_qtest-my_dialog_test.cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++11 and Boost libraries
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL and Boost
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost/travis_qmake_gcc_cpp11_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
C++11 and Boost.Test
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_boost_test"

\end_inset


\end_layout

\begin_layout Standard
Boost.Test works great for console applications.
 If you use a GUI library like Qt, using QTest is easier (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Qt-and-QTest"

\end_inset

)
\end_layout

\begin_layout Standard
This project consists out of two projects:
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp11_boost_test.pro: the real code
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp11_boost_test_test.pro: the tests
\end_layout

\begin_layout Standard
Both projects center around a function called 'add', which is located in
 the 'my_function.h' and 'my_function.cpp' files, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_boost
\backslash
_test.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $my
\backslash
_function.h$ 
\backslash

\backslash
 $my
\backslash
_function.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_boost.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_test.cpp$ 
\backslash

\backslash
 $my
\backslash
_function
\backslash
_test.cpp$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Both of these are compiled both in release and debug mode.
\end_layout

\begin_layout Paragraph
Specifics
\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL and Boost, demonstrating Boost.Test
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files: main.cpp, my_function.h, my_function.cpp, test_my_function.c
pp
\end_layout

\begin_layout Subsubsection
The function
\end_layout

\begin_layout Standard
First the function that is (1) tested by the test build (2) called by the
 real build, is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/my_functions.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_function.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This header file has the #include guards and the declaration of the function
 'add'.
 It takes two integer values as an argument and returns an int.
\end_layout

\begin_layout Standard
Its definition is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/my_functions.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_function.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Perhaps it was expected that 'add' adds the two integers
\end_layout

\begin_layout Subsubsection
Test build
\end_layout

\begin_layout Standard
The test build' is the build that tests the function.
 It does not have a 'main.cpp' as the exe build has, but uses 'test_my_functions.c
pp' as its main source file.
 This can be seen in the Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/travis_qmake_gcc_cpp11_boost_test_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost_test_test.pro
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file links to the Boost unit test framework.
\end_layout

\begin_layout Standard
Its main source file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/main_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main_test.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It uses the Boost.Test framework to automatically generate a main function
 and test suite.
 An empty file is created, so Travis can verify there has been built both
 a debug and release mode.
\end_layout

\begin_layout Standard
Its main testing file file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/my_functions_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_functions_test.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It tests the function 'add'.
\end_layout

\begin_layout Subsubsection
Exe build
\end_layout

\begin_layout Standard
The 'exe' build' is the build that uses the function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next to using the function 'add', also a file is created, so Travis can
 verify there has been built both a debug and release mode.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost_test/travis_qmake_gcc_cpp11_boost_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost_test.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_boost_test.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file does not link to the Boost unit test
 framework.
\end_layout

\begin_layout Subsubsection
Build script
\end_layout

\begin_layout Standard
The bash build script to build, test and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this script both projects are compiled in both debug and release mode.
 All four exectables are run.
\end_layout

\begin_layout Subsubsection
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost_test/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++11 and clang
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_clang_cpp11"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by using clang and C++11.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: clang
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL only
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_clang_cpp11/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_clang_cpp11/travis_qmake_clang_cpp11.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_clang_cpp11.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_clang_cpp11.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_clang_cpp11/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_clang_cpp11/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++11 and gcov
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_gcov"

\end_inset


\end_layout

\begin_layout Standard
In this example, the C++98 build with gcov (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_gcov"

\end_inset

) is extended by using C++11.
 
\end_layout

\begin_layout Paragraph
Build overview
\end_layout

\begin_layout Standard
This will be a more complex build, consisting of two projects:
\end_layout

\begin_layout Itemize
The regular project that just runs the code
\end_layout

\begin_layout Itemize
The project that measures code coverage
\end_layout

\begin_layout Standard
The filenames are shown in this figure:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (-2, 0) { $main.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (2, 0) { $do
\backslash
_magic.h$ 
\backslash

\backslash
 $do
\backslash
_magic.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_gcov
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_gcov.cpp$ };
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL only 
\end_layout

\begin_layout Itemize
Code coverage: yes 
\end_layout

\begin_layout Itemize
Source: multiple files
\end_layout

\begin_layout Paragraph
Common files
\end_layout

\begin_layout Standard
Both builds use the following code:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_gcov/do_magic.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
do_magic.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
And its implementation:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_gcov/do_magic.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
do_magic.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Normal build main function
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_gcov/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Normal build Qt Crator project file
\end_layout

\begin_layout Standard
This normal is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_gcov/travis_qmake_gcc_cpp11_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Code coverage main function
\end_layout

\begin_layout Standard
The C++ source file used by the normal build is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_gcov/main_gcov.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Code coverage build Qt Creator project file
\end_layout

\begin_layout Standard
This normal is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_gcov/travis_qmake_gcc_cpp11_gcov_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_gcov_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has two new lines:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -fprofile-arcs -ftest-coverage
\end_layout

\end_inset

Let the C++ compiler add coverage information
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LIBS += -lgcov
\end_layout

\end_inset

Link against the gcov library
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_gcov/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The new step is after having run the executable, 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

gcov main_gcov.cpp
\end_layout

\end_inset

Let gcov create a coverage report
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cat main_gcov.cpp.gcov
\end_layout

\end_inset

Show the file 'main.cpp.gcov', which contains the coverage of 'main.cpp'
\end_layout

\begin_layout Paragraph
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: true
\end_layout

\end_inset

Travis will give super user rights to the script.
 This will slow the build time, but it is inevitable for the next step
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install: sudo pip install codecov
\end_layout

\end_inset

Travis will use pip to install codecov using super user rights
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_success: codecov
\end_layout

\end_inset

After the script has run successfully, codecov is called
\end_layout

\begin_layout Subsection
C++11 and Qt
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_qt"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by both adding C++11 and the Qt library.
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL and Qt
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_qt/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_qt/travis_qmake_gcc_cpp11_qt.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_qt.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_qt.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_qt/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_qt/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
C++11 and Rcpp
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_rcpp"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Rcpp library/package.
 
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL and Rcpp
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files
\end_layout

\begin_layout Standard
The build will be complex: I will show the C++ build and the R build seperately
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1, 2) { $C++$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 $domagic.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $do
\backslash
_magic
\backslash
_cpp.h$ 
\backslash

\backslash
 $do
\backslash
_magic
\backslash
_cpp.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5, 2) { $R$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $do
\backslash
_magic
\backslash
_r.R$ 
\backslash

\backslash
 $test-do
\backslash
_magic.R$ };
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
C++ and R: the C++ function
\end_layout

\begin_layout Standard
This Travis CI project is centered around the function 'do_magic_cpp'.
 I use the extension '_cpp' to indicate it is a C++ function.
 The function 'do_magic_cpp' is used by both C++ and R.
 It is declared in the header file 'do_magic_cpp.h', as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/src/do_magic_cpp.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
src/do_magic_cpp.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The header file consists solely of #include guards and the declaration of
 the function 'do_magic_cpp'.
 The C++11 keyword 'noexcept' will make the build fail to compile under
 C++98, but will compile under C++11 and later versions of C++.
\end_layout

\begin_layout Standard
The function 'do_magic_cpp' is implemented in the implementation file 'do_magic_
cpp.cpp', as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/src/do_magic_cpp.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
src/do_magic_cpp.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This source file is very simple.
 Most lines are dedicates to the C++ roxygen2 documentation.
 Omitting this documentation will fail the R package to build, as this documenta
tion is mandatory 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Test this
\end_layout

\end_inset

.
 Note that 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// [[Rcpp::export]]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
needs to written exactly as such
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Test this
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
C++: main source file
\end_layout

\begin_layout Standard
The C++ program has a normal main function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All it does is a simple test of the 'do_magic_cpp' function.
\end_layout

\begin_layout Subsubsection
C++: Qt Creator project file
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_rcpp/domagic.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
domagic.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_rcpp_domagic.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is what the sections do:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Shared C++11 files
\end_layout

\begin_layout Plain Layout

INCLUDEPATH += src
\end_layout

\begin_layout Plain Layout

SOURCES += src/do_magic_cpp.cpp
\end_layout

\begin_layout Plain Layout

HEADERS += src/do_magic_cpp.h
\end_layout

\end_inset

These files are shared by the C++11 and R project
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Rcpp, adapted from script from Dirk Eddelbuettel and Romain Francois
\end_layout

\begin_layout Plain Layout

R_HOME = $$system(R RHOME)
\end_layout

\begin_layout Plain Layout

RCPPINCL = $$system($$R_HOME/bin/Rscript -e 
\backslash
"Rcpp:::CxxFlags
\backslash
(
\backslash
)
\backslash
")
\end_layout

\begin_layout Plain Layout

INCLUDEPATH += RCPPINCL
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Rcpp does not play nice with -Weffc++
\end_layout

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -Wall -Wextra -Werror
\end_layout

\end_inset

Let Rcpp be found by and compile cleanly.
 To do so, the '-Weffc++' warnings have to be omitted
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# C++11-only files
\end_layout

\begin_layout Plain Layout

SOURCES += main.cpp
\end_layout

\end_inset

This contains the main function that is only used by the C++11-only build
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# R
\end_layout

\begin_layout Plain Layout

LIBS += -lR
\end_layout

\end_inset

Link to the R language libraries
\end_layout

\begin_layout Subsubsection
C++: build script
\end_layout

\begin_layout Standard
The C++ bash build script is straightforward.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/build_cpp.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build_cpp.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This script is already described in the C++98 and Rcpp chapter (chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_rcpp"

\end_inset

, algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:travis_qmake_gcc_cpp98_rcpp_build_cpp.sh"

\end_inset

).
\end_layout

\begin_layout Subsubsection
R: the R function
\end_layout

\begin_layout Standard
The R function 'do_magic_r' calls the C++ function 'do_magic_cpp':
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_rcpp/R/do_magic_r.R"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
R/do_magic_r.R
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_rcpp_do_magic_r.R"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Must lines are dedicated to Roxygen2 documentation.
 Omitting this documentation will fail the R package to build, as this documenta
tion is mandatory
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Test this
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
R: The R tests
\end_layout

\begin_layout Standard
R allows for easy testing using the 'testthat' package.
 A test file looks as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_rcpp/tests/testthat/test-do_magic.R"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
tests/testthat/test-do_magic_r.R
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_rcpp_test-do_magic_r.R"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The tests call both the R and C++ functions with certain inputs and checks
 if the output matches the expectations.
 It may be a good idea to only call the R function from here, and move the
 C++ function tests to a C++ testing suite like Boost.Test.
\end_layout

\begin_layout Subsubsection
R: script to install packages
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_rcpp/install_r_packages.R"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
install_r_packages.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To compile the C++ code, Rcpp needs to be installed.
 The R package needs the other packages to work.
 An R code repository from the UK was used: without supply an R code repository,
 Travis will be asked to pick one, which it cannot.
 
\end_layout

\begin_layout Subsubsection
The Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_rcpp/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file is rather extensive:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: true
\end_layout

\begin_layout Plain Layout

language: cpp
\end_layout

\begin_layout Plain Layout

compiler: gcc
\end_layout

\end_inset

The default language used has to be C++
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install:
\end_layout

\begin_layout Plain Layout

 - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test # C++11
\end_layout

\begin_layout Plain Layout

 - sudo add-apt-repository -y ppa:marutter/rrutter # R
\end_layout

\begin_layout Plain Layout

 - sudo apt-get update -qq
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Before installation, Travis has to add to apt repositories, one for C++11
 and one for the R version used by CRAN
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

install: 
\end_layout

\begin_layout Plain Layout

 - sudo apt-get install -qq g++-5  # C++11
\end_layout

\begin_layout Plain Layout

 - sudo apt-get install -qq r-base r-base-dev  # R
\end_layout

\begin_layout Plain Layout

 - sudo apt-get install -qq lyx texlive  # pdflatex, used by knitr
\end_layout

\begin_layout Plain Layout

 - sudo Rscript install_r_packages.R  # Rcpp
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Travis has to install the prerequisites for C++11, R, pdflatex (used by
 R's knitr) and some R packages
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

script: 
\end_layout

\begin_layout Plain Layout

 # C++
\end_layout

\begin_layout Plain Layout

 - ./build_cpp.sh
\end_layout

\begin_layout Plain Layout

 # R wants all non-R files gone...
\end_layout

\begin_layout Plain Layout

 - ./clean.sh
\end_layout

\begin_layout Plain Layout

 - rm .gitignore
\end_layout

\begin_layout Plain Layout

 - rm src/.gitignore
\end_layout

\begin_layout Plain Layout

 - rm .travis.yml
\end_layout

\begin_layout Plain Layout

 - rm -rf .git
\end_layout

\begin_layout Plain Layout

 - rm -rf ..Rcheck
\end_layout

\begin_layout Plain Layout

 # Now R is ready to go
\end_layout

\begin_layout Plain Layout

 - R CMD check .
\end_layout

\end_inset

The script consists out of a build and run of the C++11 code, cleaning up
 for R, then building an R package
\end_layout

\begin_layout Subsection
C++11 and SFML
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_sfml"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by both adding C++11 and the SFML library.
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL and SFML
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_sfml/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_sfml/travis_qmake_gcc_cpp11_sfml.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_sfml.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_sfml.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_sfml/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_sfml/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
C++11 and Urho3D
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_urho3d"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by both adding C++11 and the Urho3D library.
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL and Urho3D
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_urho3d/mastercontrol.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
mastercontrol.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_urho3d/travis_qmake_gcc_cpp11_urho3d.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_urho3d.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_urho3d.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_urho3d/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_urho3d/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
C++11 and Wt
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_wt"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by both adding C++11 and the Wt library.
\end_layout

\begin_layout Standard
DOES NOT WORK YET
\end_layout

\begin_layout Paragraph
Specifications
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL and Wt
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_wt/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does ...
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_wt/travis_qmake_gcc_cpp11_wt.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_wt.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_wt.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_wt/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_wt/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\end_layout

\begin_layout Subsection
C++14 and Boost libraries
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp14_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++14
\end_layout

\begin_layout Itemize
Libraries: STL and Boost
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14_boost/travis_qmake_gcc_cpp14_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp14_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp14_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++14 and Boost.Test
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp14_boost_test"

\end_inset


\end_layout

\begin_layout Standard
This project consists out of two projects:
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp14_boost_test.pro: the real code
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp14_boost_test_test.pro: the tests
\end_layout

\begin_layout Standard
Both projects center around a function called 'add', which is located in
 the 'my_function.h' and 'my_function.cpp' files, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp14$ 
\backslash

\backslash
 $
\backslash
_boost
\backslash
_test.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $my
\backslash
_function.h$ 
\backslash

\backslash
 $my
\backslash
_function.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp14$ 
\backslash

\backslash
 $
\backslash
_boost.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_test.cpp$ 
\backslash

\backslash
 $my
\backslash
_function
\backslash
_test.cpp$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Both of these are compiled both in release and debug mode.
\end_layout

\begin_layout Paragraph
Specifics
\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++14
\end_layout

\begin_layout Itemize
Libraries: STL and Boost, demonstrating Boost.Test
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files: main.cpp, my_function.h, my_function.cpp, test_my_function.c
pp
\end_layout

\begin_layout Subsubsection
The function
\end_layout

\begin_layout Standard
First the function that is (1) tested by the test build (2) called by the
 real build, is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/my_functions.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_function.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This header file has the #include guards and the declaration of the function
 'add'.
 It takes two integer values as an argument and returns an int.
\end_layout

\begin_layout Standard
Its definition is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/my_functions.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_function.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Perhaps it was expected that 'add' adds the two integers
\end_layout

\begin_layout Subsubsection
Test build
\end_layout

\begin_layout Standard
The test build' is the build that tests the function.
 It does not have a 'main.cpp' as the exe build has, but uses 'test_my_functions.c
pp' as its main source file.
 This can be seen in the Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/travis_qmake_gcc_cpp14_boost_test_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp14_boost_test_test.pro
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file links to the Boost unit test framework.
\end_layout

\begin_layout Standard
Its main source file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/main_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main_test.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It uses the Boost.Test framework to automatically generate a main function
 and test suite.
 An empty file is created, so Travis can verify there has been built both
 a debug and release mode.
\end_layout

\begin_layout Standard
Its main testing file file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/my_functions_test.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_functions_test.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It tests the function 'add'.
\end_layout

\begin_layout Subsubsection
Exe build
\end_layout

\begin_layout Standard
The 'exe' build' is the build that uses the function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next to using the function 'add', also a file is created, so Travis can
 verify there has been built both a debug and release mode.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14_boost_test/travis_qmake_gcc_cpp14_boost_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp14_boost_test.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp14_boost_test.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file does not link to the Boost unit test
 framework.
\end_layout

\begin_layout Subsubsection
Build script
\end_layout

\begin_layout Standard
The bash build script to build and run the normal release in release mode:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/build_normal_release.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build_normal_release.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash build script to compile in debug mode and run the tests:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp14_boost_test/build_test.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build_test.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp14_boost_test/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C++14 and Rcpp
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp14_rcpp"

\end_inset


\end_layout

\begin_layout Standard
Does not work yet.
\end_layout

\begin_layout Section
Extending the build by multiple steps
\end_layout

\begin_layout Standard
The following chapter describe how to extend the build in multiple steps.
 These are:
\end_layout

\begin_layout Itemize
Use of C++11, Boost.Test and gcov: see chapter 
\end_layout

\begin_layout Subsection
C++11, Boost.Test and gcov
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_boost_test_gcov"

\end_inset


\end_layout

\begin_layout Standard
This project adds code coverage to the previous project and is mostly similar
\end_layout

\begin_layout Standard
This project consists out of two projects:
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp11_boost_test_gcov.pro: the real code
\end_layout

\begin_layout Itemize
travis_qmake_gcc_cpp11_boost_test_gcov_test.pro: the tests, also measures
 the code coverage
\end_layout

\begin_layout Standard
Both projects center around a function called 'add', which is located in
 the 'my_function.h' and 'my_function.cpp' files, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (0,0) circle (4);
\end_layout

\begin_layout Plain Layout

  
\backslash
draw (4,0) circle (4);
\end_layout

\begin_layout Plain Layout


\backslash
node[align=center] at (-1.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_boost
\backslash
_test$ 
\backslash

\backslash
 $
\backslash
_gcov.pro$ };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (-2, 0) { $main.cpp$ 
\backslash

\backslash
 };
\end_layout

\begin_layout Plain Layout

 
\backslash
node[align=center] at (2, 0) { $my
\backslash
_function.h$ 
\backslash

\backslash
 $my
\backslash
_function.cpp$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (5.5, 2) { $travis
\backslash
_qmake$ 
\backslash

\backslash
 $
\backslash
_gcc
\backslash
_cpp11$ 
\backslash

\backslash
 $
\backslash
_boost
\backslash
_test$ 
\backslash

\backslash
 $
\backslash
_gcov
\backslash
_test.pro$ };
\end_layout

\begin_layout Plain Layout

  
\backslash
node[align=center] at (6, 0) { $main
\backslash
_test.cpp$ 
\backslash

\backslash
 $my
\backslash
_function
\backslash
_test.cpp$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Venn diagram of the files uses in this build
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Both of these are compiled both in release and debug mode.
\end_layout

\begin_layout Subsubsection
The function
\end_layout

\begin_layout Standard
Same
\end_layout

\begin_layout Subsubsection
Test build
\end_layout

\begin_layout Standard
The test build' is the build that tests the function.
 It does not have a 'main.cpp' as the exe build has, but uses 'test_my_functions.c
pp' as its main source file.
 This can be seen in the Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test_gcov/travis_qmake_gcc_cpp11_boost_test_gcov_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost_test_gcov_test.pro
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file links to the Boost unit test framework
 and also add code coverage.
\end_layout

\begin_layout Standard
Its main source file is identical.
\end_layout

\begin_layout Standard
Its main testing file file is identical.
\end_layout

\begin_layout Subsubsection
Normal build
\end_layout

\begin_layout Standard
The normal build is identical.
\end_layout

\begin_layout Subsubsection
Build script
\end_layout

\begin_layout Standard
The bash build script to build, test and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../travis_qmake_gcc_cpp11_boost_test_gcov/build_test.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build_test.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this script both projects are compiled in both debug and release mode.
 All four exectables are run.
\end_layout

\begin_layout Subsubsection
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../travis_qmake_gcc_cpp11_boost_test_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has ...
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "travis_cpp_tutorial"
options "bibtotoc,plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
