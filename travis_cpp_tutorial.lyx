#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Travis C++ tutorial
\end_layout

\begin_layout Author
Rich√®l Bilderbeek
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename CppLogo.jpg
	lyxscale 50
	width 50text%

\end_inset


\begin_inset Graphics
	filename TravisCIBig.png
	lyxscale 50
	width 28text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is a Travis C++ tutorial, version 0.1
\end_layout

\begin_layout Subsection
License
\end_layout

\begin_layout Standard
This tutorial is licensed under Creative Commons license 4.0.
 All C++ code is licensed under GPL 3.0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename CC-BY-SA_icon.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creative Commons license 4.0
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Continuous integration
\end_layout

\begin_layout Standard
Collaboration can be scary: the other(s)
\begin_inset Foot
status open

\begin_layout Plain Layout
if not you
\end_layout

\end_inset

 may break the project worked on.
 The project can be of any type, not only programming, but also collaborative
 writing.
\end_layout

\begin_layout Standard
A good first step ensuring a pleasant experience is to use a version control
 system.
 A version control system keeps track of the changes in the project and
 allows for looking back in the project history when something has been
 broken.
 
\end_layout

\begin_layout Standard
The next step is to use an online version control repository, which makes
 the code easily accessible for all contributors.
 The online version control repository may also offer additional collaborative
 tools, like a place where to submit bug reports, define project milestones
 and allowing external people to submit requests, bug reports or patches.
\end_layout

\begin_layout Standard
Up until here, it is possible to submit a change that breaks the build.
 
\end_layout

\begin_layout Standard
A continuous integration tools checks what is submitted to the project and
 possibly rejects it when it does not satisfy the tests and/or requirements
 of the project.
 Instead of manually proofreading and/or testing the submission and mailing
 the contributor his/her addition is rejected is cumbersome at least.
 A continuous integration tool will do this for you.
\end_layout

\begin_layout Standard
Now, if someone changes you project, you can rest assured that his/her submissio
n does not break the project.
 Enjoy!
\end_layout

\begin_layout Subsection
Tool used
\end_layout

\begin_layout Paragraph
git
\end_layout

\begin_layout Standard
git is a version control system.
 It tracks the changes made in the project and allows for viewing the project
 its history.
 
\end_layout

\begin_layout Paragraph
GitHub
\end_layout

\begin_layout Standard
GitHub is a site where git repositories are hosted.
 It gives a git project a website where the files can be viewed.
 Next to this, there is a project page for issues like bug reports and feature
 requests.
\end_layout

\begin_layout Paragraph
Travis CI
\end_layout

\begin_layout Standard
Travis CI is a continuous integration (hence the 'CI' in its name) tool
 that plays well with GitHub.
 It is activated when someone uploads his/her code to the GitHub.
\end_layout

\begin_layout Paragraph
Boost
\end_layout

\begin_layout Standard
Boost is a collection of C++ libraries.
\end_layout

\begin_layout Paragraph
Boost.Test
\end_layout

\begin_layout Standard
Boost.Test is a C++ testing framework within the Boost libraries.
\end_layout

\begin_layout Paragraph
gcov
\end_layout

\begin_layout Standard
gcov is a GNU tool to measur the code coverage of (among others) C++ code.
 It can be actived from a Travis script.
\end_layout

\begin_layout Paragraph
Codecov
\end_layout

\begin_layout Standard
Codecov is a tool to display a gcov code coverage result, that plays well
 with GitHub.
 It can be actived from a Travis script.
\end_layout

\begin_layout Paragraph
gprof
\end_layout

\begin_layout Standard
gprof is a GNU tool to profile (among others) C++ code.
 It can be actived from a Travis script.
\end_layout

\begin_layout Subsection
This tutorial
\end_layout

\begin_layout Standard
This tutorial is available online at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/richelbilderbeek/travis_cpp_tutorial
\end_layout

\end_inset

.
 Of course, it is checked by Travis that 
\end_layout

\begin_layout Itemize
all the setups described work
\end_layout

\begin_layout Itemize
this document can be converted to PDF.
 For this it needs the files from all of these setups
\end_layout

\begin_layout Subsection
Feedback
\end_layout

\begin_layout Standard
This tutorial is not intended to be perfect yet.
 For that, I need help and feedback from the community.
 All referenced feedback is welcome, as well as any constructive feedback.
 
\end_layout

\begin_layout Section
Setting up the basic build
\end_layout

\begin_layout Standard
The basic build is more than just a collection of files.
 It needs to be set up.
 This chapter shows how to do so.
\end_layout

\begin_layout Itemize
Create a GitHub online
\end_layout

\begin_layout Itemize
Bring the git repository to your local computer
\end_layout

\begin_layout Itemize
Create a Qt Creator project
\end_layout

\begin_layout Itemize
Create the build bash scripts
\end_layout

\begin_layout Subsection
Create a GitHub online
\end_layout

\begin_layout Paragraph
What is GitHub?
\end_layout

\begin_layout Standard
GitHub is a site that creates websites around projects.
 It is said to host the project.
 This project contains one, but usually a collection of files, which is
 called a repository.
 GitHub also keeps track of the history of the project, which is also called
 version control.
 GitHub uses git as a version control software.
 In short: GitHub hosts git repositories.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-homepage"

\end_inset

 shows the GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename GitHubHomepage.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-homepage"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Register
\end_layout

\begin_layout Standard
Before you can create a new repository, you must register.
 Registration is free for open source projects, with an unlimited
\begin_inset Foot
status open

\begin_layout Plain Layout
the maximum I have observed is a person that has 350
\end_layout

\end_inset

 amount of public repositories.
\end_layout

\begin_layout Standard
From the GitHub homepage, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com
\end_layout

\end_inset

 (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-homepage"

\end_inset

), click the top right button labeled 'Sign up'.
 This will take you to the 'Join GitHub' page (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-join"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename GitHubJoin.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The join GitHub page
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-join"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Filling this in should be as easy.
 After filling this in, you are taken to your GitHub profile page (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-profile"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename GitHubProfile.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A GitHub profile page
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-profile"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Creating a repository
\end_layout

\begin_layout Standard
From your GitHub profile page (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-profile"

\end_inset

), click on the plus ('Create new ...') at the top right, then click 'New repositor
y' (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-create-repository"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename GitHubCreateRepository.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Create a GitHub repository
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-create-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Do check 'Initialize this repository with a README', add a .gitignore with
 'C++' and add a licence like 'GPL 3.0'.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename GitHubCreatedRepository.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Created a GitHub repository
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-created-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You have now created your own online version controlled repository (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-created-repository"

\end_inset

)!
\end_layout

\begin_layout Subsection
Bring the git repository to your local computer
\end_layout

\begin_layout Standard
Go to the terminal and type the following line to download your repository:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git clone https://github.com/[your_name]/[your_repository]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Replace '[your_name]' and '[your_repository]' by your GitHub username and
 the repository name.
 For example, to download this tutorial:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git clone https://github.com/richelbilderbeek/travis_cpp_tutorial
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A new folder called '[your_repository]' is created where you should work
 in.
\end_layout

\begin_layout Subsection
Create a Qt Creator project
\end_layout

\begin_layout Subsection
Create the build bash scripts
\end_layout

\begin_layout Section
The basic build
\begin_inset CommandInset label
LatexCommand label
name "sec:travis_qmake_gcc_cpp98"

\end_inset


\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL only 
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Itemize
Functionality: Show the text 'Hello world' on screen
\end_layout

\begin_layout Standard
First I will show the single C++ file this build is about:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp98/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the code does is display the text 'Hello world'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Hello world
\end_layout

\end_inset

, which is a traditional start for many programming languages.
 In more details:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <iostream>
\end_layout

\end_inset

Read a header file called 'iostream'
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main() { /* your code */ }
\end_layout

\end_inset

The 'main' function is the starting point of a C++ program.
 Its body is between curly braces
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::cout << "Hello world
\backslash
n";
\end_layout

\end_inset

Show the text 'Hello world' on screen and go to the next line
\end_layout

\begin_layout Standard
The code is written in C++98
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++98
\end_layout

\end_inset

.
 It does not use features from the newer C++ standards, but can be compiled
 under these newer standards.
 It will not compile under plain C.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Qt Creator project file
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98/travis_qmake_gcc_cpp98.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This Qt Creator project file has the following elements
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TEMPLATE = app
\end_layout

\begin_layout Plain Layout

CONFIG += console
\end_layout

\begin_layout Plain Layout

CONFIG -= app_bundle qt
\end_layout

\end_inset

This is a typical setup for a standard console application
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SOURCES += main.cpp
\end_layout

\end_inset

The file 'main.cpp' is a source file, that has to be compiled
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -Wall -Wextra -Weffc++ -Werror
\end_layout

\end_inset

The project is checked for all warnings.
 A warning is treated as an error.
 This forces you to write tidy code.
\end_layout

\begin_layout Standard
The bash build script to build this is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp98/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This build script calls 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/bin/bash
\end_layout

\end_inset

This line indicates the script is a bash script
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

qmake
\end_layout

\end_inset

'qmake'
\begin_inset Index idx
status open

\begin_layout Plain Layout
qmake
\end_layout

\end_inset

 is called to create a makefile
\begin_inset Index idx
status open

\begin_layout Plain Layout
Makefile
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

make
\end_layout

\end_inset

'make'
\begin_inset Index idx
status open

\begin_layout Plain Layout
make
\end_layout

\end_inset

 is called to compile the makefile
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./travis_qmake_gcc_cpp98
\end_layout

\end_inset

The created executable 'travis_qmake_gcc_cpp98' is run
\end_layout

\begin_layout Standard
There is a potential error in the first and last step: the Qt Creator project
 file may be incorrect, or the executable will crash, possibly due to a
 failed test.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml
\begin_inset Foot
status open

\begin_layout Plain Layout
the filename starts with a dot.
 This means it is a hidden file
\end_layout

\end_inset

 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has the following elements:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

language: cpp
\end_layout

\end_inset

The main programming language of this project is C++
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

compiler: gcc
\end_layout

\end_inset

The C++ code will be compiled by GCC
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

script: ./travis_qmake_gcc_cpp98
\end_layout

\end_inset

The script that Travis will run, which is running the generated executable
 called 'travis_qmake_gcc_cpp98'.
\end_layout

\begin_layout Section
Extending the build by one step
\end_layout

\begin_layout Standard
The following chapter describe how to extend the build in one direction.
 These are:
\end_layout

\begin_layout Itemize
Use of C++11: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++14: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\begin_layout Itemize
Use of Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_boost"

\end_inset


\end_layout

\begin_layout Itemize
Use of Boost.Test: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_boost_test"

\end_inset


\end_layout

\begin_layout Itemize
Use of gcov: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_gcov"

\end_inset


\end_layout

\begin_layout Itemize
Use of gprof: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp98_gprof"

\end_inset


\end_layout

\begin_layout Subsection
Use of C++11
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by using C++11.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11 
\end_layout

\begin_layout Itemize
Libraries: STL only
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a C++11 version of a 'Hello world' program.
 The keyword 'noexcept' does not exist in C++98 and it will fail to compile.
 This code will compile under C++14.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11/travis_qmake_gcc_cpp11.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

, except for:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXX = g++-5
\end_layout

\begin_layout Plain Layout

QMAKE_LINK = g++-5
\end_layout

\begin_layout Plain Layout

QMAKE_CC = g++5
\end_layout

\end_inset

Set the C++ compiler, linker and C compiler to use g++ version 5, which
 is a newer version than currently used by default
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

QMAKE_CXXFLAGS += -std=c++11
\end_layout

\end_inset

Compile under C++11
\end_layout

\begin_layout Standard
The bash build script to build and run this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install:
\end_layout

\begin_layout Plain Layout

  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
\end_layout

\begin_layout Plain Layout

  - sudo apt-get update -qq
\end_layout

\end_inset

A new apt repository is added.
 Then the current apt repository is updated
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

install: sudo apt-get install -qq g++-5
\end_layout

\end_inset

Install g++-5, which is a newer version of GCC than is installed by default
\end_layout

\begin_layout Subsection
Use of C++14
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by using C++14.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++14 
\end_layout

\begin_layout Itemize
Libraries: STL only
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp14/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a simple C++14 program that will not compile under C++11.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp14/travis_qmake_gcc_cpp14.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp14.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp14"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp14/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp14/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

addons:
\end_layout

\begin_layout Plain Layout

  apt:
\end_layout

\begin_layout Plain Layout

    packages: libboost-all-dev
\end_layout

\end_inset

This makes Travis aware that you want to use the aptitude package 'libboost-all-
dev'.
 Note that this code cannot be put on one line: it has to be indented similar
 to this
\end_layout

\begin_layout Subsection
Adding the Boost libraries
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL and Boost
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp98_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98_boost/travis_qmake_gcc_cpp98_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp98_boost/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

addons:
\end_layout

\begin_layout Plain Layout

  apt:
\end_layout

\begin_layout Plain Layout

    packages: libboost-all-dev
\end_layout

\end_inset

This makes Travis aware that you want to use the aptitude package 'libboost-all-
dev'.
 Note that this code cannot be put on one line: it has to be indented similar
 to this
\end_layout

\begin_layout Subsection
Adding a testing framework
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_boost_test"

\end_inset


\end_layout

\begin_layout Standard
Adding only a testing framework does not work: it will not compile in C++98.
 Instead, this is covered in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11_boost_test"

\end_inset

.
\end_layout

\begin_layout Subsection
Adding code coverage
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_gcov"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by calling gcov and using codecov to show the code coverage.
 
\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++98 
\end_layout

\begin_layout Itemize
Libraries: STL only 
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp98_gcov/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This file openly contains some dead code, so we expect to observe a code
 coverage less than 100%.
\end_layout

\begin_layout Standard
There are multiple Qt Creator project files:
\end_layout

\begin_layout Itemize
the true executable: _exe
\end_layout

\begin_layout Itemize
the executable that measures code coverage
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98_gcov/travis_qmake_gcc_cpp98_gcov.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp98_gcov.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp98_gcov.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has two new lines.
 The first of those adds two compiler flags, which cause the code to be
 compiled in such a way to gcov can work with it.
 The second line links the gcov library to the project.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp98_gcov/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The new step is after having run the executable, where gcov is run on the
 only source file.
 The text 'gcov' has generated is then shown using 'cat'.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98_gcov/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: true
\end_layout

\end_inset

Travis will give super user rights to the script.
 This will slow the build time, but it is inevitable for the next step
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install: sudo pip install codecov
\end_layout

\end_inset

Travis will use pip to install codecov using super user rights
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_success: codecov
\end_layout

\end_inset

After the script has run successfully, codecov is called
\end_layout

\begin_layout Subsection
Adding profiling
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp98_gprof"

\end_inset


\end_layout

\begin_layout Section
Extending the build by two steps
\end_layout

\begin_layout Standard
The following chapter describe how to extend the build in two directions.
 These are:
\end_layout

\begin_layout Itemize
Use of C++11 and Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp11_boost"

\end_inset


\end_layout

\begin_layout Itemize
Use of C++14 and Boost: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:travis_qmake_gcc_cpp14_boost"

\end_inset


\end_layout

\begin_layout Subsection
C++11 and Boost libraries
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL and Boost
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98_boost/travis_qmake_gcc_cpp11_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_boost/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

addons:
\end_layout

\begin_layout Plain Layout

  apt:
\end_layout

\begin_layout Plain Layout

    packages: libboost-all-dev
\end_layout

\end_inset

This makes Travis aware that you want to use the aptitude package 'libboost-all-
dev'.
 Note that this code cannot be put on one line: it has to be indented similar
 to this
\end_layout

\begin_layout Subsection
C++14 and Boost libraries
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp14_boost"

\end_inset


\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by also using the Boost libraries.
 
\end_layout

\begin_layout Standard
The chapter has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++14
\end_layout

\begin_layout Itemize
Libraries: STL and Boost
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: one single file, main.cpp
\end_layout

\begin_layout Standard
The single C++ source file used is:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp14_boost/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the file does is to create an empty graph, from the Boost.Graph library.
 It will not compile without the Boost libraries absent.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp98_boost/travis_qmake_gcc_cpp14_boost.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp14_boost.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp14_boost.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qt Creator project file has the same lines as the basic project in chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp14_boost/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bash script has the same lines as the basic project in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

.
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp14_boost/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has one new feature:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

addons:
\end_layout

\begin_layout Plain Layout

  apt:
\end_layout

\begin_layout Plain Layout

    packages: libboost-all-dev
\end_layout

\end_inset

This makes Travis aware that you want to use the aptitude package 'libboost-all-
dev'.
 Note that this code cannot be put on one line: it has to be indented similar
 to this
\end_layout

\begin_layout Section
Extending the build by multiple steps
\end_layout

\begin_layout Subsection
C++11, Boost and Boost.Test
\begin_inset CommandInset label
LatexCommand label
name "sub:travis_qmake_gcc_cpp11_boost_test"

\end_inset


\end_layout

\begin_layout Standard
Adding only a testing framework does not work: it will not compile in C++98.
 Instead, this is covered in 
\end_layout

\begin_layout Standard
In this example, the basic build (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:travis_qmake_gcc_cpp98"

\end_inset

) is extended by calling gcov and using codecov to show the code coverage.
 
\end_layout

\begin_layout Standard
The basic build has the following specs:
\end_layout

\begin_layout Itemize
Build system: qmake 
\end_layout

\begin_layout Itemize
C++ compiler: gcc 
\end_layout

\begin_layout Itemize
C++ version: C++11
\end_layout

\begin_layout Itemize
Libraries: STL and Boost, demonstrating Boost.Test
\end_layout

\begin_layout Itemize
Code coverage: none 
\end_layout

\begin_layout Itemize
Source: multiple files: main.cpp, my_function.h, my_function.cpp, test_my_function.c
pp
\end_layout

\begin_layout Standard
This project use four types of builds and each of these produces a different
 file.
 These files are used to let Travis check if the executable were built correctly.
 An overview of builds and files are shown in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Types-of-builds"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Debug
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exe_debug.txt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
test_debug.txt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Release
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exe_release.txt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
test_debug.txt
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Types of builds and the file they will create
\begin_inset CommandInset label
LatexCommand label
name "tab:Types-of-builds"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The function
\end_layout

\begin_layout Standard
First the function that is (1) tested by the test build (2) called by the
 real build, is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_boost_test/my_functions.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_function.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This header file has the #include guards and the declaration of the function
 'add'.
 It takes two integer values as an argument and returns an int.
\end_layout

\begin_layout Standard
Its definition is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_boost_test/my_functions.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
my_function.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Perhaps it was expected that 'add' adds the two integers
\end_layout

\begin_layout Subsubsection
Test build
\end_layout

\begin_layout Standard
The test build' is the build that tests the function.
 It does not have a 'main.cpp' as the exe build has, but uses 'test_my_functions.c
pp' as its main source file.
 This can be seen in the Qt Creator project file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_boost_test/travis_qmake_gcc_cpp11_boost_test_test.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost_test_test.pro
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file links to the Boost unit test framework.
\end_layout

\begin_layout Standard
Its main source file is shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_boost_test/test_my_functions.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
test_my_functions.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It uses the Boost.Test framework to automatically generate a test suites.
 Next to testing the function 'add', also a file is created, so Travis can
 verify there has been built both a debug and release mode.
\end_layout

\begin_layout Subsubsection
Exe build
\end_layout

\begin_layout Standard
The 'exe' build' is the build that uses the function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_boost_test/main.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next to using the function 'add', also a file is created, so Travis can
 verify there has been built both a debug and release mode.
\end_layout

\begin_layout Standard
This single file is compiled with qmake from the following Qt Creator project
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_boost_test/travis_qmake_gcc_cpp11_boost_test_exe.pro"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
travis_qmake_gcc_cpp11_boost_test_exe.pro
\begin_inset CommandInset label
LatexCommand label
name "alg:travis_qmake_gcc_cpp11_boost_test_exe.pro"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how this Qt Creator project file does not link to the Boost unit test
 framework.
\end_layout

\begin_layout Subsubsection
Build script
\end_layout

\begin_layout Standard
The bash build script to build this, run this and measure the code coverage:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "travis_qmake_gcc_cpp11_boost_test/build.sh"
lstparams "breaklines=true,language={bash}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
build.sh
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The new step is after having run the executable, where gcov is run on the
 only source file.
 The text 'gcov' has generated is then shown using 'cat'.
\end_layout

\begin_layout Subsubsection
Travis script
\end_layout

\begin_layout Standard
Setting up Travis is done by the following .travis.yml:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "travis_qmake_gcc_cpp11_boost_test/.travis.yml"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.travis.yml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .travis.yml file has some new features: 
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo: true
\end_layout

\end_inset

Travis will give super user rights to the script.
 This will slow the build time, but it is inevitable for the next step
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

before_install: sudo pip install codecov
\end_layout

\end_inset

Travis will use pip to install codecov using super user rights
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

after_success: codecov
\end_layout

\end_inset

After the script has run successfully, codecov is called
\end_layout

\end_body
\end_document
